tb2_country
#Exercises
#2
#table 2
tb2_cases <- group_by(table2, type == "cases")[["count"]]
tb2_year <- group_by(table2, type == "cases")[["year"]]
tb2_year
tb2_population <- group_by(table2, type = "cases")[["population"]]
tb2_population
tb2_population <- group_by(table2, type = "population")[["count"]]
tb2_population
table2_tidy <- tibble(country = tb2_country,
year = tb2_year,
cases = tb2_cases,
population = tb2_population,
rate = cases/ population * 10000)
table2_tidy
tb2_population <- group_by(table2, type = "population")[["count"]]
table2_tidy <- tibble(country = tb2_country,
year = tb2_year,
cases = tb2_cases,
population = tb2_population,
rate = cases/ population * 10000)
table2_tidy
table2_tidy <- tibble(country = tb2_country,
year = tb2_year,
rate = tb2_cases/ tb2_population * 10000)
table2_tidy
tb2_population
table2_tidy <- tibble(country = tb2_country,
year = tb2_year,
rate = tb2_cases/ tb2_population)
tb2_population
tb2_tidy
table2_tidy
tb2_population <- group_by(table2, type = "population")
tb2_population
table2
tb2_population
tb2_population <- group_by(table2, type == "population")[["count"]]
tb2_population
tb2_population <- group_by(table2, type == "population")[["count"]]
tb2_population <- group_by(table2, type == "population")[["count"]]
tb2_population
tb2_population <- group_by(table2, type == "population")
tb2_population
tb2_cases
#Exercises
#2
#table 2
tb2_cases <- filter(table2, type == "cases")[["count"]]
tb2_country <- filter(table2, type == "cases")[["country"]]
tb2_year <- filter(table2, type == "cases")[["year"]]
filter()tb2_population <- filter(table2, type == "population")
tb2_population <- filter(table2, type == "population")[["count"]]
table2_tidy <- tibble(country = tb2_country,
year = tb2_year,
rate = tb2_cases/ tb2_population)
table2_tidy
table2_tidy <- tibble(country = tb2_country,
year = tb2_year,
rate = tb2_cases/ tb2_population * 10000)
c(table4a, table4b)
table4a
?rep
table4b
#table4
table4_rate <- tibble(country = filter(table4a, type == "country")[["country"]],
"Rate 1999" = table4a[["1999"]] / table4b[["1999"]] * 10000)
#table4
table4_rate <- tibble(country = select(table4a, "country")],
"Rate 1999" = table4a[["1999"]] / table4b[["1999"]] * 10000)
#table4
table4_rate <- tibble(country = select(table4a, "country"),
"Rate 1999" = table4a[["1999"]] / table4b[["1999"]] * 10000)
#table4
table4_rate <- tibble(country = select(table4a, country),
"Rate 1999" = table4a[["1999"]] / table4b[["1999"]] * 10000)
#table4
table4_rate <- tibble(country = table4a[["country"]],
"Rate 1999" = table4a[["1999"]] / table4b[["1999"]] * 10000)
table4_rate
#table4
table4_rate <- tibble(country = table4a[["country"]],
"Rate 1999" = table4a[["1999"]] / table4b[["1999"]] * 10000
"Rate 2000" = table4a[["2000"]] / table4b[["2000"]] * 10000
)
#table4
table4_rate <- tibble(country = table4a[["country"]],
"Rate 1999" = table4a[["1999"]] / table4b[["1999"]] * 10000,
"Rate 2000" = table4a[["2000"]] / table4b[["2000"]] * 10000
)
table4_rate
#Gathering
table4a %>%
gather(key = "year", value = "cases")
#Gathering
table4a %>%
gather('1999', '2000', key = "year", value = "cases")
table4b
table4b %>%
gather('1999', '2000', key = 'year', value = 'population')
left_join(table4a, table4b)
#Gathering
table4a <- table4a %>%
gather('1999', '2000', key = "year", value = "cases")
table4b <-  table4b %>%
gather('1999', '2000', key = 'year', value = 'population')
left_join(table4a, table4b)
table2
spread(table2, key = type, value = count)
#Exercise
stocks <- tibble(
year   = c(2015, 2015, 2016, 2016),
half  = c(   1,    2,     1,    2),
return = c(1.88, 0.59, 0.92, 0.17)
)
stocks
stocks %>%
spread(year, return)
stocks %>%
spread(year, return) %>%
gather("year", "return", "2015", "2016")
?spread
people <- tribble(
~name,             ~key,    ~value,
#-----------------|--------|------
"Phillip Woods",   "age",       45,
"Phillip Woods",   "height",   186,
"Phillip Woods",   "age",       50,
"Jessica Cordero", "age",       37,
"Jessica Cordero", "height",   156
=======
getwd()
library(tidyverse)
write_csv(diamonds, "diamonds.csv")
ggplot(data = diamonds, aes(carat, price)) +
geom_hex()
ggsave("diamonds.pdf")
write_csv(diamonds, "diamonds.csv")
as_tibble(iris)
library(tidyverse)
as_tibble(iris)
source('~/r4ds/chapter10.R', echo=TRUE)
tibble(
x = 1:5,
y = 1,
z = x ^ 2 + y
>>>>>>> 97c807f85ecfbb9dcc84f02b7d37aa146cc59ff5
)
tribble(
~x, ~y, ~z,
#--/--/----
"a", 2, 3.6,
"b", 1, 8.5
)
df <- tibble(
x = runif(5),
y = rmorn(5)
)
df <- tibble(
x = runif(5),
y = rnorm(5)
)
df$x
df[1]
df[["x"]]
df[[1]]
#Exercise
print(mtcars)
tibble(mtcars)
cars_df <- tibble(mtcars)
cars_df <- as_tibble(mtcars)
print(cars_df)
#2
df <- data.frame(abc = 1, xyz = "a")
df$x
print(df)
df$x
df$x
df["xyz"]
df[, "xyz"]
df[, c("abc", "xyz")]
df <- tibble(
x = runif(5),
y = rnorm(5)
)
#3
df[[1]]
#3
df[,[1]]
#3
df$1
#3
df
#3
df[["x"]]
#3
df[[x]]
#3
df[, "x"]
#3
df$x
#3
df$1
#3
df[[1]]
#3
df[1]
install.packages("sparklyr")
locale("vi")
libráº£y(tidyverse)
library(tidyverse)
<<<<<<< HEAD
library(jsonlite)
lst <- fromJSON("fuckthis.json")
?glympse
glimpse(json_file)
json_file[[3]]
stack(json_file[[3]])
glimpse(json_file[[3]])
?sapply
?lapply
transform(json_file, stack(sapply(json_file))
transform(json_file, stack(sapply(json_file)))
transform(json_file, stack(json_file), towns=c(sapply(json_file, names)))
transform(json_file, stack(json_file))
json_file[[3]]
stack(json_file[[3]])
stack(lapply(json_file[[3]]))
lapply(json_file, stack)
sapply(json_file, list)
as.tibble(sapply(json_file, list))
as.tibble(sapply(json_file, stack(list))
as.tibble(sapply(json_file, stack(list)))
as.tibble(sapply(json_file, stack(list[[1:14]])))
kenh14_df <- as.tibble(sapply(json_file, stack(list)))
kenh14_df <- as.tibble(sapply(json_file, list))
kenh14_df
stack(kenh14_df)
stack(kenh14_df, list)
transform(json_file, stack(kenh14_df, list))
transform(lst, stack(lst))
transform(json_file, stack(list))
stacl(lst)
stack(lst)
stack(json_file)
source('~/Learning R/r4ds/chapter12.R', echo=TRUE)
table3 %>%
separate(rate, into = c("cases", "population"), sep = "/")
?separate
table3 %>%
separate(rate, into = c("cases", "population"), sep = "/", convert = TRUE)
table5
unite(table5, "century", "year")
unite(table5, new, "century", "year")
unite(table5, new, "century", "year", sep = "")
unite(table5, new, "century", "year", sep = "", convert = TRUE)
unite(table5, new, "century", "year", sep = "")
?unite
#Exercises
#1
tibble(x = c("a,b,c", "d,e,f,g", "h,i,j")) %>%
separate(x, c("one", "two", "three"))
?separate
#Exercises
#1
tibble(x = c("a,b,c", "d,e,f,g", "h,i,j")) %>%
separate(x, c("one", "two", "three"), extra = "drop")
#Exercises
#1
tibble(x = c("a,b,c", "d,e,f,g", "h,i,j")) %>%
separate(x, c("one", "two", "three"), extra = "merge")
#Exercises
#1
tibble(x = c("a,b,c", "d,e,f,g", "h,i,j")) %>%
separate(x, c("one", "two", "three"), fill = "right")
#Exercises
#1
tibble(x = c("a,b,c", "d,e,f,g", "h,i,j")) %>%
separate(x, c("one", "two", "three"), extra = "merge",fill = "right")
#Exercises
#1
tibble(x = c("a,b,c", "d,e,f,g", "h,i,j")) %>%
separate(x, c("one", "two", "three"), extra = "merge", fill = "right")
tibble(x = c("a,b,c", "d,e", "h,i,j")) %>%
separate(x, c("one", "two", "three"))
tibble(x = c("a,b,c", "d,e", "h,i,j")) %>%
separate(x, c("one", "two", "three"), fill = "right")
tibble(x = c("a,b,c", "d,e", "h,i,j")) %>%
separate(x, c("one", "two", "three"), fill = "left")
table5
?unite
table5 %>%
unite(new, "century", "year", sep = "", remove = FALSE)
table5 %>%
unite(new, "century", "year", sep = "", remove = TRUE)
#Chapter 14 Strings
library(tidyverse)
library(stringr)
string_test <- "this is astring without a closing quote
string_test <- "this is astring without a closing quote
=======
locale("vi")
locale("ko")
locale("fr")
locale("es")
challenge2 <- read_csv(readr_example("challenge.csv"), guess_max = 1002)
challenge2 <- read_csv(readr_example("challenge.csv"), guess_max = 1000)
challenge2 <- read_csv(readr_example("challenge.csv"), guess_max = 1002)
challenge2 <- read_csv(readr_example("challenge.csv"), guess_max = 1002)
challenge2 <- read_csv(readr_example("challenge.csv"), guess_max = 1005)
challenge2 <- read_csv(readr_example("challenge.csv"), guess_max = 1001)
challenge2 <- read_csv(readr_example("challenge.csv"), guess_max = 1000)
challenge2 <- read_csv(readr_example("challenge.csv"), guess_max = 1001)
challenge2 <- read_csv(readr_example("challenge.csv"), guess_max = 1002)
challenge2 <- read_csv(readr_example("challenge.csv"), guess_max = 1000)
challenge2 <- read_csv(readr_example("challenge.csv"), guess_max = 1001)
updateR()
install.packages("installr")
library(installr)
updateR()
>>>>>>> 97c807f85ecfbb9dcc84f02b7d37aa146cc59ff5
source('~/r4ds/r4ds/rocket1h_plot.R', echo=TRUE)
source('~/r4ds/r4ds/rocket1h_plot.R', echo=TRUE)
source('~/r4ds/r4ds/rocket1h_plot.R', echo=TRUE)
rocket1h_df_binned <- rocket1h_df %>%
group_by(bins) %>%
summarize(mean_impressions = mean(Impressions),
mean_clicks = mean(Clicks),
mean_sessions = mean(Sessions),
mean_conversions = mean(Conversions))
ggplot(rocket1h_df_binned, mapping = aes(x = bins, y = mean_impressions)) +
geom_point() +
geom_smooth()
rocket1h_df_binned
rocket1h_df
rocket1h_df_binned <- rocket1h_df %>%
group_by(bins)
rocket1h_df %>%
group_by(bins)
rocket1h_df %>%
group_by(bins)
source('~/r4ds/r4ds/rocket1h_plot.R', echo=TRUE)
rocket1h_df %>%
group_by(bins) %>%
summarize(mean_impressions = mean(Impressions),
mean_clicks = mean(Clicks),
mean_sessions = mean(Sessions),
mean_conversions = mean(Conversions))
View(rocket1h_df)
rocket1h_df %>%
group_by(bins)
rocket1h_df %>%
group_by(bins) %>%
summarize(mean_impressions = mean(Impressions))
rocket1h_df_binned <- rocket1h_df %>%
group_by(bins) %>%
summarize(mean_impressions = mean(Impressions),
mean_clicks = mean(Clicks),
mean_sessions = mean(Sessions),
mean_conversions = mean(Conversions))
rocket1h_df %>%
group_by(bins) %>%
summarize(mean_impressions = mean(Impressions),
mean_clicks = mean(Clicks),
mean_sessions = mean(Sessions),
mean_conversions = mean(Conversions))
rocket1h_df$bins <- cut(rocket1h_df$Budget,
breaks = c(seq(0, 9000000, by = 1000000)),
labels = label_list,
include.lowest = TRUE)
View(rocket1h_df)
source('~/r4ds/r4ds/rocket1h_plot.R', echo=TRUE)
df %>%
group_by(bins) %>%
summarize(mean_impressions = mean(Impressions),
mean_clicks = mean(Clicks),
mean_sessions = mean(Sessions),
mean_conversions = mean(Conversions))
library(nycflights)
install.packages("nycflights13")
library(nycflights13)
delays <- flights %>%
group_by(dest) %>%
summarise(
count = n(),
dist = mean(distance, na.rm = TRUE),
delay = mean(arr_delay, na.rm = TRUE)
) %>%
filter(count > 20, dest != "HNL")
source('~/r4ds/r4ds/rocket1h_plot.R', echo=TRUE)
df %>%
group_by(bins) %>%
summarize(mean_impressions = mean(Impressions),
mean_clicks = mean(Clicks),
mean_sessions = mean(Sessions),
mean_conversions = mean(Conversions))
df$bins <- cut(df$Budget,
breaks = c(seq(0, 9000000, by = 1000000)),
labels = label_list,
include.lowest = TRUE)
source('~/r4ds/r4ds/rocket1h_plot.R', echo=TRUE)
df %>%
group_by(bins) %>%
summarize(mean_impressions = mean(Impressions),
mean_clicks = mean(Clicks),
mean_sessions = mean(Sessions),
mean_conversions = mean(Conversions))
library(nycflights13)
delays <- flights %>%
group_by(dest) %>%
summarise(
count = n(),
dist = mean(distance, na.rm = TRUE),
delay = mean(arr_delay, na.rm = TRUE)
) %>%
filter(count > 20, dest != "HNL")
source('~/r4ds/r4ds/rocket1h_plot.R', echo=TRUE)
delays <- flights %>%
group_by(dest) %>%
summarise(
count = n(),
dist = mean(distance, na.rm = TRUE),
delay = mean(arr_delay, na.rm = TRUE)
) %>%
filter(count > 20, dest != "HNL")
df %>%
group_by(bins) %>%
summarize(mean_impressions = mean(Impressions),
mean_clicks = mean(Clicks),
mean_sessions = mean(Sessions),
mean_conversions = mean(Conversions))
df_binned <- df %>%
group_by(bins) %>%
summarize(mean_impressions = mean(Impressions),
mean_clicks = mean(Clicks),
mean_sessions = mean(Sessions),
mean_conversions = mean(Conversions))
ggplot(df_binned, mapping = aes(x = bins, y = mean_impressions)) +
geom_line()
ggplot(df_binned, mapping = aes(x = bins, y = mean_impressions)) +
geom_point()
ggplot(df_binned, mapping = aes(x = bins, y = mean_impressions)) +
geom_point() +
geom_smooth()
ggplot(df_binned, mapping = aes(x = bins, y = mean_impressions)) +
geom_point() +
geom_smooth(model = lm)
ggplot(df, mapping = aes(Budget, Sessions)) +
geom_point() +
geom_smooth(model = lm)
ggplot(df, mapping = aes(Budget, Sessions)) +
geom_point() +
geom_smooth()
ggplot(df, mapping = aes(Budget, Clicks)) +
geom_point() +
geom_smooth()
ggplot(df_binned, mapping = aes(x = bins, y = mean_impressions)) +
geom_point() +
geom_smooth()
ggplot(df_binned, mapping = aes(x = bins, y = mean_impressions)) +
geom_point() +
geom_path()
ggplot(df_binned, mapping = aes(x = bins, y = mean_impressions)) +
geom_point() +
geom_path(group = 1)
ggplot(df_binned, mapping = aes(x = bins, y = mean_impressions)) +
geom_point(size = 1) +
geom_path(group = 1)
ggplot(df_binned, mapping = aes(x = bins, y = mean_impressions)) +
geom_point(size = 3) +
geom_path(group = 1)
ggplot(df_binned, mapping = aes(x = bins, y = mean_impressions)) +
geom_point(size = 3) +
geom_path(group = 1, size = 1)
ggplot(df_binned, mapping = aes(x = bins, y = mean_impressions)) +
geom_point(size = 3) +
geom_path(group = 1, size = 1) +
theme_minimal()
ggplot(df_binned, mapping = aes(x = bins, y = mean_impressions)) +
geom_point(size = 3) +
geom_path(group = 1, size = 0.8) +
theme_minimal()
ggplot(df_binned, mapping = aes(x = bins, y = mean_impressions)) +
geom_point(size = 3) +
geom_path(group = 1, size = 0.8) +
theme_minimal() +
xlab("Budget range")
ggplot(df_binned, mapping = aes(x = bins, y = mean_impressions)) +
geom_point(size = 3) +
geom_path(group = 1, size = 0.8) +
theme_minimal() +
xlab("Budget range") +
ylab("Avg. impressions") +
scale_y_continuous(labels = comma)
source('~/.active-rstudio-document', echo=TRUE)
grid.arrange(p1, p2, p3, nrow = 2, ncol = 1)
grid.arrange(p1, p2, p3, nrow = 2)
grid.arrange(p1, p2, p3, nrow = 3)
p2 <- ggplot(df, mapping = aes(Budget, Impressions)) +
geom_point() +
geom_smooth(model = lm) +
scale_x_continuous(labels = comma),
scale_y_continuous(labels = comma),
theme_minimal()
grid.arrange(p1, p2, p3, nrow = 3)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
grid.arrange(p1, p3, p2, nrow = 2)
source('~/.active-rstudio-document', echo=TRUE)
source('~/r4ds/r4ds/rocket1h_demo.R', echo=TRUE)
